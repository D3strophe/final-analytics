my_data <- read.csv("data/raceData.csv",header=TRUE, stringsAsFactors = TRUE)
summary(my_data)
head(my_data)
library(caret)
my_data <- read.csv("data/raceData.csv",header=TRUE, stringsAsFactors = TRUE)
set.seed(1337)
index <- createDataPartition(my_data$Finish.Position, p = .6, list = FALSE)
train_data <- my_data[index, ]
test_data <- my_data[-index, ]
train_control <- trainControl(method="cv", number=10)
model_lm <- train(Finish.Position ~ ., data=train_data, method="lm", trControl=train_control)
install.packages(doParallel)
install.packages("doParallel")
library(caret)
library(doParallel)
registerDoParallel(cores = detectCores() - 1)
my_data <- read.csv("data/raceData.csv",header=TRUE, stringsAsFactors = TRUE)
set.seed(1337)
index <- createDataPartition(my_data$Finish.Position, p = .6, list = FALSE)
train_data <- my_data[index, ]
test_data <- my_data[-index, ]
train_control <- trainControl(method="cv", number=10, verboseIter=TRUE)
system.time({
model_lm <- train(Finish.Position ~ ., data=train_data, method="lm", trControl=train_control)
})
install.packages("xgboost")
install.packages("drat", repos="https://cran.rstudio.com")
full_model <- lm(Finish.Position ~ ., data=train_data)
library(caret)
library(doParallel)
registerDoParallel(cores = detectCores() - 1)
my_data <- read.csv("data/raceData.csv",header=TRUE, stringsAsFactors = TRUE)
set.seed(1337)
index <- createDataPartition(my_data$Finish.Position, p = .6, list = FALSE)
train_data <- my_data[index, ]
test_data <- my_data[-index, ]
train_control <- trainControl(method="cv", number=10, verboseIter=TRUE)
system.time({
model_lm <- train(Finish.Position ~ ., data=train_data, method="lm", trControl=train_control)
})
stopImplicitCluster()
print(model_lm)
predictions <- predict(model_lm, newdata=test_data)
actual <- test_data$Finish.Position
test_r_squared <- cor(actual, predictions)^2
rmse_test <- sqrt(mean((predictions - actual)^2))
cat("Test Set R-squared:", test_r_squared, "\n")
cat("Test Set RMSE:", rmse_test, "\n")
library(caret)
library(doParallel)
registerDoParallel(cores = detectCores() - 1)
my_data <- read.csv("data/raceData.csv",header=TRUE, stringsAsFactors = TRUE)
set.seed(1337)
index <- createDataPartition(my_data$Finish.Position, p = .6, list = FALSE)
train_data <- my_data[index, ]
test_data <- my_data[-index, ]
train_control <- trainControl(method="cv", number=10, verboseIter=TRUE)
system.time({
model_lm <- train(Finish.Position ~ ., data=train_data, method="lm", trControl=train_control)
})
stopImplicitCluster()
print(model_lm)
predictions <- predict(model_lm, newdata=test_data)
actual <- test_data$Finish.Position
test_r_squared <- cor(actual, predictions)^2
rmse_test <- sqrt(mean((predictions - actual)^2))
cat("Test Set R-squared:", test_r_squared, "\n")
cat("Test Set RMSE:", rmse_test, "\n")
residuals <- test_data$Finish.Position - predictions
results <- data.frame(
Actual = test_data$Finish.Position,
Predicted = predictions,
Residual = residuals
)
correct_threshold <- 1
results$Correctly_Predicted <- abs(results$Residual) <= correct_threshold
library(ggplot2)
ggplot(results, aes(x = Actual, y = Predicted)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "red") +
labs(title = "Actual vs. Predicted Finish Positions", x = "Actual Finish Position", y = "Predicted Finish Position")
library(ggplot2)
ggplot(results, aes(x = Actual, y = Predicted)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "red") +
labs(title = "Actual vs. Predicted Finish Positions", x = "Actual Finish Position", y = "Predicted Finish Position")
library(caret)
library(doParallel)
registerDoParallel(cores = detectCores() - 1)
my_data <- read.csv("data/raceData.csv",header=TRUE, stringsAsFactors = TRUE)
my_data$Finish.Position <- factor(my_data$Finish.Position, levels = 1:12, ordered = TRUE)
set.seed(1337)
index <- createDataPartition(my_data$Finish.Position, p = .6, list = FALSE)
train_data <- my_data[index, ]
test_data <- my_data[-index, ]
train_control <- trainControl(method="cv", number=10, verboseIter=TRUE)
system.time({
model_lm <- train(Finish.Position ~ ., data=train_data, method="lm", trControl=train_control)
})
library(caret)
library(doParallel)
registerDoParallel(cores = detectCores() - 1)
setwd("C:/Users/Jason/OneDrive/Documents/PreAnalytics")
library(caret)
library(doParallel)
registerDoParallel(cores = detectCores() - 1)
my_data <- read.csv("data/raceData.csv", header = TRUE, stringsAsFactors = TRUE)
set.seed(1337)
index <- createDataPartition(my_data$Finish.Position, p = .6, list = FALSE)
train_data <- my_data[index, ]
test_data <- my_data[-index, ]
all_levels <- union(levels(train_data$Genotype), levels(test_data$Genotype))
train_data$Genotype <- factor(train_data$Genotype, levels = all_levels)
test_data$Genotype <- factor(test_data$Genotype, levels = all_levels)
# This fixes this error
# > predictions <- predict(model_lm, newdata = test_data)
# Error in model.frame.default(Terms, newdata, na.action = na.action, xlev = object$xlevels) :
#   factor Genotype has new levels Z111, Z128, Z148, Z153, Z195
model_lm <- lm(Finish.Position ~ ., data = train_data)
print(model_lm)
predictions <- predict(model_lm, newdata = test_data)
library(caret)
library(doParallel)
registerDoParallel(cores = detectCores() - 1)
my_data <- read.csv("data/raceData.csv", header = TRUE, stringsAsFactors = TRUE)
set.seed(1337)
index <- createDataPartition(my_data$Finish.Position, p = .6, list = FALSE)
train_data <- my_data[index, ]
test_data <- my_data[-index, ]
all_levels <- union(levels(train_data$Genotype), levels(test_data$Genotype))
train_data$Genotype <- factor(train_data$Genotype, levels = all_levels)
test_data$Genotype <- factor(test_data$Genotype, levels = all_levels)
model_lm <- lm(Finish.Position ~ ., data = train_data)
print(model_lm)
predictions <- predict(model_lm, newdata = test_data)
View(test_data)
View(train_data)
predictions <- predict(model_lm, newdata = test_data)
all_levels <- union(levels(train_data$Genotype), levels(test_data$Genotype))
train_data$Genotype <- as.factor(train_data$Genotype, levels = all_levels)
library(caret)
library(doParallel)
registerDoParallel(cores = detectCores() - 1)
my_data <- read.csv("data/raceData.csv", header = TRUE, stringsAsFactors = TRUE)
set.seed(1337)
index <- createDataPartition(my_data$Finish.Position, p = .6, list = FALSE)
train_data <- my_data[index, ]
test_data <- my_data[-index, ]
model_lm <- lm(Finish.Position ~ ., data = train_data)
print(model_lm)
predictions <- predict(model_lm, newdata = test_data)
model_lm <- lm(Finish.Position ~ ., data = train_data)
print(model_lm)
all_levels <- union(levels(train_data$Genotype), levels(test_data$Genotype))
train_data$Genotype <- factor(train_data$Genotype, levels = all_levels)
test_data$Genotype <- factor(test_data$Genotype, levels = all_levels)
predictions <- predict(model_lm, newdata = test_data)
print(levels(train_data$Genotype))
print(levels(test_data$Genotype))
library(caret)
library(doParallel)
registerDoParallel(cores = detectCores() - 1)
my_data <- read.csv("data/raceData.csv", header = TRUE, stringsAsFactors = TRUE)
set.seed(1337)
index <- createDataPartition(my_data$Finish.Position, p = .6, list = FALSE)
train_data <- my_data[index, ]
test_data <- my_data[-index, ]
all_levels <- union(levels(train_data$Genotype), levels(test_data$Genotype))
train_data$Genotype <- factor(train_data$Genotype, levels = all_levels)
test_data$Genotype <- factor(test_data$Genotype, levels = all_levels)
#
# # This should be fixing this error
# # > predictions <- predict(model_lm, newdata = test_data)
# # Error in model.frame.default(Terms, newdata, na.action = na.action, xlev = object$xlevels) :
# #   factor Genotype has new levels Z111, Z128, Z148, Z153, Z195
model_lm <- lm(Finish.Position ~ ., data = train_data)
print(model_lm)
predictions <- predict(model_lm, newdata = test_data)
View(test_data)
View(train_data)
train_control <- trainControl(method = "cv", number = 10, verboseIter = TRUE)
system.time({
model_lm_cf <- train(Finish.Position ~ ., data = train_data, method = "lm", trControl = train_control)
})
predictions <- predict(model_lm_cf, newdata = test_data)
actual <- test_data$Finish.Position
test_r_squared <- cor(actual, predictions)^2
rmse_test <- sqrt(mean((predictions - actual)^2))
cat("Test Set R-squared:", test_r_squared, "\n")
cat("Test Set RMSE:", rmse_test, "\n")
difference_train_not_in_test <- setdiff(levels(train_data$Genotype), levels(test_data$Genotype))
difference_test_not_in_train <- setdiff(levels(test_data$Genotype), levels(train_data$Genotype))
print(difference_train_not_in_test)
print(difference_test_not_in_train)
